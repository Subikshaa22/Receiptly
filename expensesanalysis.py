# -*- coding: utf-8 -*-
"""ExpensesAnalysis.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Wx-bqQZaJwcAm_Zo7CwS5rQjt4v3NqmG
"""

!pip install pandas matplotlib seaborn openpyxl tiktoken google-generativeai
!pip install -U google-generativeai

import pandas as pd
from datetime import datetime
import numpy as np

# Sample dataset
np.random.seed(42)
dates = pd.date_range(start="2025-01-01", periods=180, freq="D")
data = {
    "date": np.random.choice(dates, 500),
    "category": np.random.choice(["groceries", "dining", "transport", "entertainment", "utilities"], 500),
    "amount": np.round(np.random.uniform(100, 2000, 500), 2)
}
df = pd.DataFrame(data)
df["month"] = df["date"].dt.to_period("M")
df["weekday"] = df["date"].dt.day_name()
df.head()

import matplotlib.pyplot as plt
import seaborn as sns

# Line graph: monthly trends
monthly_trend["month_str"] = monthly_trend["month"].astype(str)

plt.figure(figsize=(12,6))
sns.lineplot(data=monthly_trend, x="month_str", y="amount", hue="category", marker="o")
plt.title("Monthly Spending Trends")
plt.xlabel("Month")
plt.ylabel("Amount Spent")
plt.show()


# Pie chart: % share
latest_month = df["month"].max()
latest_data = df[df["month"] == latest_month]
pie_data = latest_data.groupby("category")["amount"].sum()
pie_data.plot.pie(autopct="%1.1f%%", figsize=(6,6), title=f"Spending Share in {latest_month}")
plt.ylabel("")
plt.show()

# Heatmap: weekday spending
heat_data = df.pivot_table(index="weekday", columns="month", values="amount", aggfunc="sum").fillna(0)
heat_data = heat_data.reindex(["Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday"])
plt.figure(figsize=(12,6))
sns.heatmap(heat_data, annot=True, fmt=".0f", cmap="YlGnBu")
plt.title("Weekday Spending Heatmap")
plt.show()

# Excel report
report_path = "/content/monthly_report.xlsx"
df.to_excel(report_path, index=False)
print(f"✅ Excel report saved: {report_path}")

# PDF via matplotlib (simple export)
plt.figure(figsize=(12,6))
sns.barplot(data=monthly_trend, x="month", y="amount", hue="category")
plt.title("Bar Chart for monthly spending")
pdf_path = "/content/monthly_report.pdf"
plt.savefig(pdf_path)
print(f"✅ PDF report saved: {pdf_path}")

compare_df = monthly_trend.pivot(index="category", columns="month", values="amount").fillna(0)
compare_df["% change"] = (compare_df.iloc[:, -1] - compare_df.iloc[:, -2]) / compare_df.iloc[:, -2] * 100
compare_df

spikes = compare_df[compare_df["% change"].abs() > 20]
print("Unusual spikes or drops:")
print(spikes)

from sklearn.linear_model import LinearRegression

# Predict next month for each category
predictions = {}
for cat in df["category"].unique():
    sub = monthly_trend[monthly_trend["category"] == cat]
    X = sub["month"].apply(lambda x: x.ordinal).values.reshape(-1,1)
    y = sub["amount"].values
    model = LinearRegression().fit(X,y)
    next_month = sub["month"].max() + 1
    pred_amt = model.predict([[next_month.ordinal]])[0]
    predictions[cat] = round(pred_amt, 2)

predictions

import google.generativeai as genai

genai.configure(api_key="")

# for m in genai.list_models():
#     print(m.name)

model = genai.GenerativeModel("gemini-1.5-flash-latest")

def get_smart_tip(predictions):
    prompt = f"""
    Based on these predicted expenses next month:
    {predictions}
    Suggest 3 actionable saving tips for the user.
    """
    response = model.generate_content(prompt)
    return response.text


# Call
smart_tips = get_smart_tip(predictions)
print(smart_tips)

genai.configure(api_key="")


def ask_expense_question(user_question, df):
    prompt = f"""
    You are a financial assistant.
    Data: {df.to_dict(orient="records")}
    User question: {user_question}
    Give a precise and helpful answer.
    """
    model = genai.GenerativeModel("gemini-1.5-flash-latest")
    response = model.generate_content(prompt)
    return response.text

# Example
print(ask_expense_question("How much did I spend on transport in May?", df))

